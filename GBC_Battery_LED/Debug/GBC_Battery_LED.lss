
GBC_Battery_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  000007c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000606  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004fc  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034b  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	35 c2       	rjmp	.+1130   	; 0x476 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e2       	ldi	r30, 0x2C	; 44
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 36       	cpi	r26, 0x6B	; 107
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	6a c3       	rjmp	.+1748   	; 0x728 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
volatile uint8_t batState = MAX_BAT, batStateLast = MAX_BAT;

volatile uint8_t state = INIT;
	
int main(void)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
	cli();
  5e:	f8 94       	cli
	Init_GPIO();
  60:	9e d1       	rcall	.+828    	; 0x39e <Init_GPIO>
	Init_Timer();
  62:	e3 d1       	rcall	.+966    	; 0x42a <Init_Timer>
	Init_ADC();
  64:	b6 d1       	rcall	.+876    	; 0x3d2 <Init_ADC>
	
	sei();
  66:	78 94       	sei
		
		
		
		
		
		switch(state)
  68:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <state>
  6c:	88 2f       	mov	r24, r24
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	91 05       	cpc	r25, r1
  74:	09 f4       	brne	.+2      	; 0x78 <main+0x22>
  76:	58 c0       	rjmp	.+176    	; 0x128 <main+0xd2>
  78:	82 30       	cpi	r24, 0x02	; 2
  7a:	91 05       	cpc	r25, r1
  7c:	1c f4       	brge	.+6      	; 0x84 <main+0x2e>
  7e:	89 2b       	or	r24, r25
  80:	29 f1       	breq	.+74     	; 0xcc <main+0x76>
			case CHANGING:
				setLED(batState);
				state = MEASURE;
				break;
			default: 
				break;
  82:	94 c0       	rjmp	.+296    	; 0x1ac <__stack+0x4d>
		
		
		
		
		
		switch(state)
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	91 05       	cpc	r25, r1
  88:	09 f4       	brne	.+2      	; 0x8c <main+0x36>
  8a:	7e c0       	rjmp	.+252    	; 0x188 <__stack+0x29>
  8c:	03 97       	sbiw	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <main+0x3c>
  90:	85 c0       	rjmp	.+266    	; 0x19c <__stack+0x3d>
			case CHANGING:
				setLED(batState);
				state = MEASURE;
				break;
			default: 
				break;
  92:	8c c0       	rjmp	.+280    	; 0x1ac <__stack+0x4d>
		switch(state)
		{
			case INIT:
				while(voltage > 4.2f || voltage < 2.3f)
				{
					voltage = getVoltage();
  94:	8c d0       	rcall	.+280    	; 0x1ae <getVoltage>
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <voltage>
  9e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <voltage+0x1>
  a2:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <voltage+0x2>
  a6:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <voltage+0x3>
					batStateLast = batState;
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <batStateLast>
					batState = volt_comp(voltage);
  b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <voltage>
  b6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <voltage+0x1>
  ba:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <voltage+0x2>
  be:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <voltage+0x3>
  c2:	bc 01       	movw	r22, r24
  c4:	cd 01       	movw	r24, r26
  c6:	d4 d0       	rcall	.+424    	; 0x270 <volt_comp>
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		
		switch(state)
		{
			case INIT:
				while(voltage > 4.2f || voltage < 2.3f)
  cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <voltage>
  d0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <voltage+0x1>
  d4:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <voltage+0x2>
  d8:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <voltage+0x3>
  dc:	26 e6       	ldi	r18, 0x66	; 102
  de:	36 e6       	ldi	r19, 0x66	; 102
  e0:	46 e8       	ldi	r20, 0x86	; 134
  e2:	50 e4       	ldi	r21, 0x40	; 64
  e4:	bc 01       	movw	r22, r24
  e6:	cd 01       	movw	r24, r26
  e8:	1b d3       	rcall	.+1590   	; 0x720 <__gesf2>
  ea:	18 16       	cp	r1, r24
  ec:	9c f2       	brlt	.-90     	; 0x94 <main+0x3e>
  ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <voltage>
  f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <voltage+0x1>
  f6:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <voltage+0x2>
  fa:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <voltage+0x3>
  fe:	23 e3       	ldi	r18, 0x33	; 51
 100:	33 e3       	ldi	r19, 0x33	; 51
 102:	43 e1       	ldi	r20, 0x13	; 19
 104:	50 e4       	ldi	r21, 0x40	; 64
 106:	bc 01       	movw	r22, r24
 108:	cd 01       	movw	r24, r26
 10a:	ec d1       	rcall	.+984    	; 0x4e4 <__cmpsf2>
 10c:	88 23       	and	r24, r24
 10e:	14 f2       	brlt	.-124    	; 0x94 <main+0x3e>
				{
					voltage = getVoltage();
					batStateLast = batState;
					batState = volt_comp(voltage);
				}
				setLED(batState);
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	85 d0       	rcall	.+266    	; 0x220 <setLED>
				timeout = 0x10;
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <timeout+0x1>
 11e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timeout>
				state = MEASURE;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <state>
			case MEASURE:
			voltage = getVoltage();
 128:	42 d0       	rcall	.+132    	; 0x1ae <getVoltage>
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <voltage>
 132:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <voltage+0x1>
 136:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <voltage+0x2>
 13a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <voltage+0x3>
				batState = volt_comp(voltage);
 13e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <voltage>
 142:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <voltage+0x1>
 146:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <voltage+0x2>
 14a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <voltage+0x3>
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	8e d0       	rcall	.+284    	; 0x270 <volt_comp>
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				if(batState != batStateLast)
 158:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <batStateLast>
 160:	98 17       	cp	r25, r24
 162:	71 f0       	breq	.+28     	; 0x180 <__stack+0x21>
				{
					batStateLast = batState;
 164:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <batStateLast>
					timeout = 0x2f0;
 16c:	80 ef       	ldi	r24, 0xF0	; 240
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <timeout+0x1>
 174:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timeout>
					state = WAITING;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <state>
				}
				else
					state = CHANGING;
				break;
 17e:	16 c0       	rjmp	.+44     	; 0x1ac <__stack+0x4d>
					batStateLast = batState;
					timeout = 0x2f0;
					state = WAITING;
				}
				else
					state = CHANGING;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <state>
				break;
 186:	12 c0       	rjmp	.+36     	; 0x1ac <__stack+0x4d>
			case WAITING:
				if(timeout == 0)
 188:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <timeout>
 18c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <timeout+0x1>
 190:	89 2b       	or	r24, r25
 192:	59 f4       	brne	.+22     	; 0x1aa <__stack+0x4b>
				{
					state = MEASURE;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <state>
				}
				break;
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <__stack+0x4b>
			case CHANGING:
				setLED(batState);
 19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a0:	3f d0       	rcall	.+126    	; 0x220 <setLED>
				state = MEASURE;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <state>
				break;
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <__stack+0x4d>
			case WAITING:
				if(timeout == 0)
				{
					state = MEASURE;
				}
				break;
 1aa:	00 00       	nop
				state = MEASURE;
				break;
			default: 
				break;
		}
	}
 1ac:	5d cf       	rjmp	.-326    	; 0x68 <main+0x12>

000001ae <getVoltage>:
}

double getVoltage()
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	adc_val = (ADCH << 8) | ADCL; // read val
 1b6:	85 e2       	ldi	r24, 0x25	; 37
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	88 2f       	mov	r24, r24
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	38 2f       	mov	r19, r24
 1c4:	22 27       	eor	r18, r18
 1c6:	84 e2       	ldi	r24, 0x24	; 36
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	82 2b       	or	r24, r18
 1d4:	93 2b       	or	r25, r19
 1d6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 1da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if(adc_val > 0)
 1de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1e6:	89 2b       	or	r24, r25
 1e8:	b1 f0       	breq	.+44     	; 0x216 <getVoltage+0x68>
	return (1.13f * 1024) / adc_val;
 1ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ee:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1f2:	cc 01       	movw	r24, r24
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	df d1       	rcall	.+958    	; 0x5bc <__floatunsisf>
 1fe:	dc 01       	movw	r26, r24
 200:	cb 01       	movw	r24, r22
 202:	9c 01       	movw	r18, r24
 204:	ad 01       	movw	r20, r26
 206:	67 ed       	ldi	r22, 0xD7	; 215
 208:	73 ea       	ldi	r23, 0xA3	; 163
 20a:	80 e9       	ldi	r24, 0x90	; 144
 20c:	94 e4       	ldi	r25, 0x44	; 68
 20e:	6e d1       	rcall	.+732    	; 0x4ec <__divsf3>
 210:	dc 01       	movw	r26, r24
 212:	cb 01       	movw	r24, r22
 214:	00 c0       	rjmp	.+0      	; 0x216 <getVoltage+0x68>

}
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <setLED>:

void setLED(uint8_t batteryState)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	1f 92       	push	r1
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	89 83       	std	Y+1, r24	; 0x01
	switch(batteryState)
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	61 f0       	breq	.+24     	; 0x250 <setLED+0x30>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	19 f0       	breq	.+6      	; 0x244 <setLED+0x24>
 23e:	89 2b       	or	r24, r25
 240:	61 f0       	breq	.+24     	; 0x25a <setLED+0x3a>
	{
		case MAX_BAT: PORTB = 0x08; break;	//green
		case MED_BAT: PORTB = 0x00; break;	//yellow
		case MIN_BAT: PORTB = 0x10; break;	//red
		default: break;
 242:	11 c0       	rjmp	.+34     	; 0x266 <setLED+0x46>

void setLED(uint8_t batteryState)
{
	switch(batteryState)
	{
		case MAX_BAT: PORTB = 0x08; break;	//green
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	28 e0       	ldi	r18, 0x08	; 8
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	0b c0       	rjmp	.+22     	; 0x266 <setLED+0x46>
		case MED_BAT: PORTB = 0x00; break;	//yellow
 250:	88 e3       	ldi	r24, 0x38	; 56
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
 258:	06 c0       	rjmp	.+12     	; 0x266 <setLED+0x46>
		case MIN_BAT: PORTB = 0x10; break;	//red
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	20 e1       	ldi	r18, 0x10	; 16
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
 264:	00 00       	nop
		default: break;
	}	
}
 266:	00 00       	nop
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <volt_comp>:

uint8_t volt_comp(double val)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <volt_comp+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <volt_comp+0x8>
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	6a 83       	std	Y+2, r22	; 0x02
 280:	7b 83       	std	Y+3, r23	; 0x03
 282:	8c 83       	std	Y+4, r24	; 0x04
 284:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t ret = MIN_BAT;
 286:	19 82       	std	Y+1, r1	; 0x01
	switch(batState)
 288:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28c:	88 2f       	mov	r24, r24
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	91 05       	cpc	r25, r1
 294:	81 f1       	breq	.+96     	; 0x2f6 <volt_comp+0x86>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	91 05       	cpc	r25, r1
 29a:	21 f0       	breq	.+8      	; 0x2a4 <volt_comp+0x34>
 29c:	89 2b       	or	r24, r25
 29e:	09 f4       	brne	.+2      	; 0x2a2 <volt_comp+0x32>
 2a0:	48 c0       	rjmp	.+144    	; 0x332 <volt_comp+0xc2>
 2a2:	70 c0       	rjmp	.+224    	; 0x384 <volt_comp+0x114>
	{
		case MAX_BAT:
		{	
			/* Voltage dropping */
			if((val < THRES_YELLOW_LOW) && (val > THRES_RED_LOW))
 2a4:	26 e6       	ldi	r18, 0x66	; 102
 2a6:	36 e6       	ldi	r19, 0x66	; 102
 2a8:	46 e4       	ldi	r20, 0x46	; 70
 2aa:	50 e4       	ldi	r21, 0x40	; 64
 2ac:	6a 81       	ldd	r22, Y+2	; 0x02
 2ae:	7b 81       	ldd	r23, Y+3	; 0x03
 2b0:	8c 81       	ldd	r24, Y+4	; 0x04
 2b2:	9d 81       	ldd	r25, Y+5	; 0x05
 2b4:	17 d1       	rcall	.+558    	; 0x4e4 <__cmpsf2>
 2b6:	88 23       	and	r24, r24
 2b8:	74 f4       	brge	.+28     	; 0x2d6 <volt_comp+0x66>
 2ba:	23 e3       	ldi	r18, 0x33	; 51
 2bc:	33 e3       	ldi	r19, 0x33	; 51
 2be:	43 e3       	ldi	r20, 0x33	; 51
 2c0:	50 e4       	ldi	r21, 0x40	; 64
 2c2:	6a 81       	ldd	r22, Y+2	; 0x02
 2c4:	7b 81       	ldd	r23, Y+3	; 0x03
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ca:	2a d2       	rcall	.+1108   	; 0x720 <__gesf2>
 2cc:	18 16       	cp	r1, r24
 2ce:	1c f4       	brge	.+6      	; 0x2d6 <volt_comp+0x66>
				ret = MED_BAT;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	89 83       	std	Y+1, r24	; 0x01
			/* Voltage dropping even further */	
			else if(val <= THRES_RED_LOW)
				ret = MIN_BAT;
			else
				ret = MAX_BAT;
			break;
 2d4:	5b c0       	rjmp	.+182    	; 0x38c <volt_comp+0x11c>
		{	
			/* Voltage dropping */
			if((val < THRES_YELLOW_LOW) && (val > THRES_RED_LOW))
				ret = MED_BAT;
			/* Voltage dropping even further */	
			else if(val <= THRES_RED_LOW)
 2d6:	23 e3       	ldi	r18, 0x33	; 51
 2d8:	33 e3       	ldi	r19, 0x33	; 51
 2da:	43 e3       	ldi	r20, 0x33	; 51
 2dc:	50 e4       	ldi	r21, 0x40	; 64
 2de:	6a 81       	ldd	r22, Y+2	; 0x02
 2e0:	7b 81       	ldd	r23, Y+3	; 0x03
 2e2:	8c 81       	ldd	r24, Y+4	; 0x04
 2e4:	9d 81       	ldd	r25, Y+5	; 0x05
 2e6:	fe d0       	rcall	.+508    	; 0x4e4 <__cmpsf2>
 2e8:	18 16       	cp	r1, r24
 2ea:	14 f0       	brlt	.+4      	; 0x2f0 <volt_comp+0x80>
				ret = MIN_BAT;
 2ec:	19 82       	std	Y+1, r1	; 0x01
			else
				ret = MAX_BAT;
			break;
 2ee:	4e c0       	rjmp	.+156    	; 0x38c <volt_comp+0x11c>
				ret = MED_BAT;
			/* Voltage dropping even further */	
			else if(val <= THRES_RED_LOW)
				ret = MIN_BAT;
			else
				ret = MAX_BAT;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	89 83       	std	Y+1, r24	; 0x01
			break;
 2f4:	4b c0       	rjmp	.+150    	; 0x38c <volt_comp+0x11c>
		}
		case MED_BAT:
		{	
			/* Voltage dropping */
			if(val <= THRES_RED_LOW)
 2f6:	23 e3       	ldi	r18, 0x33	; 51
 2f8:	33 e3       	ldi	r19, 0x33	; 51
 2fa:	43 e3       	ldi	r20, 0x33	; 51
 2fc:	50 e4       	ldi	r21, 0x40	; 64
 2fe:	6a 81       	ldd	r22, Y+2	; 0x02
 300:	7b 81       	ldd	r23, Y+3	; 0x03
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	9d 81       	ldd	r25, Y+5	; 0x05
 306:	ee d0       	rcall	.+476    	; 0x4e4 <__cmpsf2>
 308:	18 16       	cp	r1, r24
 30a:	14 f0       	brlt	.+4      	; 0x310 <volt_comp+0xa0>
				ret = MIN_BAT;
 30c:	19 82       	std	Y+1, r1	; 0x01
			else if(val >= THRES_YELLOW_HIGH)
				ret = MAX_BAT;
			else
				ret = MED_BAT;
				
			break;
 30e:	3e c0       	rjmp	.+124    	; 0x38c <volt_comp+0x11c>
		{	
			/* Voltage dropping */
			if(val <= THRES_RED_LOW)
				ret = MIN_BAT;
			/* voltage rising */
			else if(val >= THRES_YELLOW_HIGH)
 310:	23 e3       	ldi	r18, 0x33	; 51
 312:	33 e3       	ldi	r19, 0x33	; 51
 314:	43 e5       	ldi	r20, 0x53	; 83
 316:	50 e4       	ldi	r21, 0x40	; 64
 318:	6a 81       	ldd	r22, Y+2	; 0x02
 31a:	7b 81       	ldd	r23, Y+3	; 0x03
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	9d 81       	ldd	r25, Y+5	; 0x05
 320:	ff d1       	rcall	.+1022   	; 0x720 <__gesf2>
 322:	88 23       	and	r24, r24
 324:	1c f0       	brlt	.+6      	; 0x32c <volt_comp+0xbc>
				ret = MAX_BAT;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	89 83       	std	Y+1, r24	; 0x01
			else
				ret = MED_BAT;
				
			break;
 32a:	30 c0       	rjmp	.+96     	; 0x38c <volt_comp+0x11c>
				ret = MIN_BAT;
			/* voltage rising */
			else if(val >= THRES_YELLOW_HIGH)
				ret = MAX_BAT;
			else
				ret = MED_BAT;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	89 83       	std	Y+1, r24	; 0x01
				
			break;
 330:	2d c0       	rjmp	.+90     	; 0x38c <volt_comp+0x11c>
		}
		case MIN_BAT:
		{
			/* voltage rising */
			if((val >= THRES_RED_HIGH) && (val < THRES_YELLOW_HIGH))
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e4       	ldi	r20, 0x40	; 64
 338:	50 e4       	ldi	r21, 0x40	; 64
 33a:	6a 81       	ldd	r22, Y+2	; 0x02
 33c:	7b 81       	ldd	r23, Y+3	; 0x03
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	9d 81       	ldd	r25, Y+5	; 0x05
 342:	ee d1       	rcall	.+988    	; 0x720 <__gesf2>
 344:	88 23       	and	r24, r24
 346:	74 f0       	brlt	.+28     	; 0x364 <volt_comp+0xf4>
 348:	23 e3       	ldi	r18, 0x33	; 51
 34a:	33 e3       	ldi	r19, 0x33	; 51
 34c:	43 e5       	ldi	r20, 0x53	; 83
 34e:	50 e4       	ldi	r21, 0x40	; 64
 350:	6a 81       	ldd	r22, Y+2	; 0x02
 352:	7b 81       	ldd	r23, Y+3	; 0x03
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	9d 81       	ldd	r25, Y+5	; 0x05
 358:	c5 d0       	rcall	.+394    	; 0x4e4 <__cmpsf2>
 35a:	88 23       	and	r24, r24
 35c:	1c f4       	brge	.+6      	; 0x364 <volt_comp+0xf4>
				ret = MED_BAT;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	89 83       	std	Y+1, r24	; 0x01
			else if(val >= THRES_YELLOW_HIGH)
				ret = MAX_BAT;
			else
				ret = MIN_BAT;
			break;
 362:	14 c0       	rjmp	.+40     	; 0x38c <volt_comp+0x11c>
		case MIN_BAT:
		{
			/* voltage rising */
			if((val >= THRES_RED_HIGH) && (val < THRES_YELLOW_HIGH))
				ret = MED_BAT;
			else if(val >= THRES_YELLOW_HIGH)
 364:	23 e3       	ldi	r18, 0x33	; 51
 366:	33 e3       	ldi	r19, 0x33	; 51
 368:	43 e5       	ldi	r20, 0x53	; 83
 36a:	50 e4       	ldi	r21, 0x40	; 64
 36c:	6a 81       	ldd	r22, Y+2	; 0x02
 36e:	7b 81       	ldd	r23, Y+3	; 0x03
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	9d 81       	ldd	r25, Y+5	; 0x05
 374:	d5 d1       	rcall	.+938    	; 0x720 <__gesf2>
 376:	88 23       	and	r24, r24
 378:	1c f0       	brlt	.+6      	; 0x380 <volt_comp+0x110>
				ret = MAX_BAT;
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	89 83       	std	Y+1, r24	; 0x01
			else
				ret = MIN_BAT;
			break;
 37e:	06 c0       	rjmp	.+12     	; 0x38c <volt_comp+0x11c>
			if((val >= THRES_RED_HIGH) && (val < THRES_YELLOW_HIGH))
				ret = MED_BAT;
			else if(val >= THRES_YELLOW_HIGH)
				ret = MAX_BAT;
			else
				ret = MIN_BAT;
 380:	19 82       	std	Y+1, r1	; 0x01
			break;
 382:	04 c0       	rjmp	.+8      	; 0x38c <volt_comp+0x11c>
		}
		default:
		{
			ret = batState;
 384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 388:	89 83       	std	Y+1, r24	; 0x01
			break;
 38a:	00 00       	nop
		}
	}
	return ret;
 38c:	89 81       	ldd	r24, Y+1	; 0x01
}
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Init_GPIO>:

void Init_GPIO()
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<RED_LED) | (1<<GREEN_LED);
 3a6:	87 e3       	ldi	r24, 0x37	; 55
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	27 e3       	ldi	r18, 0x37	; 55
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	20 81       	ld	r18, Z
 3b2:	28 61       	ori	r18, 0x18	; 24
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
	PORTB |= (1<<RED_LED) | (1<<GREEN_LED);
 3b8:	88 e3       	ldi	r24, 0x38	; 56
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	28 e3       	ldi	r18, 0x38	; 56
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	28 61       	ori	r18, 0x18	; 24
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
}
 3ca:	00 00       	nop
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <Init_ADC>:

void Init_ADC()
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62

 ADCSRA|=(1<<ADEN);       //Enable ADC module
 3da:	86 e2       	ldi	r24, 0x26	; 38
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	26 e2       	ldi	r18, 0x26	; 38
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	20 68       	ori	r18, 0x80	; 128
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
 ADMUX |=(1<<MUX3)|(1 << MUX2); // ADC1 (PA1) channel is selected
 3ec:	87 e2       	ldi	r24, 0x27	; 39
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	27 e2       	ldi	r18, 0x27	; 39
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	2c 60       	ori	r18, 0x0C	; 12
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 ADCSRB|=(1<<ADTS2);   //Timer / Counter 0 overflow triggers the ADC to perform conversion
 3fe:	83 e2       	ldi	r24, 0x23	; 35
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	23 e2       	ldi	r18, 0x23	; 35
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	24 60       	ori	r18, 0x04	; 4
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
 ADCSRA|=(1<<ADSC)|(1<<ADATE); //Enabling start of conversion and Auto trigger
 410:	86 e2       	ldi	r24, 0x26	; 38
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	26 e2       	ldi	r18, 0x26	; 38
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	20 66       	ori	r18, 0x60	; 96
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
}
 422:	00 00       	nop
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <Init_Timer>:

void Init_Timer()
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 TCCR0A=0x00;            //Timer0 normal mode
 432:	8a e4       	ldi	r24, 0x4A	; 74
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	10 82       	st	Z, r1
 TCCR0B=0x00;
 43a:	83 e5       	ldi	r24, 0x53	; 83
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	fc 01       	movw	r30, r24
 440:	10 82       	st	Z, r1
 TCCR0B |= (1<<CS01);   //no prescaling
 442:	83 e5       	ldi	r24, 0x53	; 83
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	23 e5       	ldi	r18, 0x53	; 83
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	f9 01       	movw	r30, r18
 44c:	20 81       	ld	r18, Z
 44e:	22 60       	ori	r18, 0x02	; 2
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18
 TCNT0=0;
 454:	82 e5       	ldi	r24, 0x52	; 82
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	10 82       	st	Z, r1
 TIMSK |= (1 << TOIE0);
 45c:	89 e5       	ldi	r24, 0x59	; 89
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	29 e5       	ldi	r18, 0x59	; 89
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	20 81       	ld	r18, Z
 468:	22 60       	ori	r18, 0x02	; 2
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
}
 46e:	00 00       	nop
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <__vector_5>:

ISR(TIM0_OVF_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
	if(timeout > 0)
 496:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <timeout>
 49a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <timeout+0x1>
 49e:	89 2b       	or	r24, r25
 4a0:	49 f0       	breq	.+18     	; 0x4b4 <__vector_5+0x3e>
		timeout--;
 4a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <timeout>
 4a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <timeout+0x1>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <timeout+0x1>
 4b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timeout>
	TIFR|=(1<<TOV0);  //Clearing overflow flag
 4b4:	88 e5       	ldi	r24, 0x58	; 88
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	28 e5       	ldi	r18, 0x58	; 88
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	22 60       	ori	r18, 0x02	; 2
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
 4c6:	00 00       	nop
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__cmpsf2>:
 4e4:	a8 d0       	rcall	.+336    	; 0x636 <__fp_cmp>
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <__cmpsf2+0x6>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	08 95       	ret

000004ec <__divsf3>:
 4ec:	0c d0       	rcall	.+24     	; 0x506 <__divsf3x>
 4ee:	de c0       	rjmp	.+444    	; 0x6ac <__fp_round>
 4f0:	d6 d0       	rcall	.+428    	; 0x69e <__fp_pscB>
 4f2:	40 f0       	brcs	.+16     	; 0x504 <__divsf3+0x18>
 4f4:	cd d0       	rcall	.+410    	; 0x690 <__fp_pscA>
 4f6:	30 f0       	brcs	.+12     	; 0x504 <__divsf3+0x18>
 4f8:	21 f4       	brne	.+8      	; 0x502 <__divsf3+0x16>
 4fa:	5f 3f       	cpi	r21, 0xFF	; 255
 4fc:	19 f0       	breq	.+6      	; 0x504 <__divsf3+0x18>
 4fe:	bf c0       	rjmp	.+382    	; 0x67e <__fp_inf>
 500:	51 11       	cpse	r21, r1
 502:	08 c1       	rjmp	.+528    	; 0x714 <__fp_szero>
 504:	c2 c0       	rjmp	.+388    	; 0x68a <__fp_nan>

00000506 <__divsf3x>:
 506:	e3 d0       	rcall	.+454    	; 0x6ce <__fp_split3>
 508:	98 f3       	brcs	.-26     	; 0x4f0 <__divsf3+0x4>

0000050a <__divsf3_pse>:
 50a:	99 23       	and	r25, r25
 50c:	c9 f3       	breq	.-14     	; 0x500 <__divsf3+0x14>
 50e:	55 23       	and	r21, r21
 510:	b1 f3       	breq	.-20     	; 0x4fe <__divsf3+0x12>
 512:	95 1b       	sub	r25, r21
 514:	55 0b       	sbc	r21, r21
 516:	bb 27       	eor	r27, r27
 518:	aa 27       	eor	r26, r26
 51a:	62 17       	cp	r22, r18
 51c:	73 07       	cpc	r23, r19
 51e:	84 07       	cpc	r24, r20
 520:	38 f0       	brcs	.+14     	; 0x530 <__divsf3_pse+0x26>
 522:	9f 5f       	subi	r25, 0xFF	; 255
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	44 1f       	adc	r20, r20
 52c:	aa 1f       	adc	r26, r26
 52e:	a9 f3       	breq	.-22     	; 0x51a <__divsf3_pse+0x10>
 530:	33 d0       	rcall	.+102    	; 0x598 <__divsf3_pse+0x8e>
 532:	0e 2e       	mov	r0, r30
 534:	3a f0       	brmi	.+14     	; 0x544 <__divsf3_pse+0x3a>
 536:	e0 e8       	ldi	r30, 0x80	; 128
 538:	30 d0       	rcall	.+96     	; 0x59a <__divsf3_pse+0x90>
 53a:	91 50       	subi	r25, 0x01	; 1
 53c:	50 40       	sbci	r21, 0x00	; 0
 53e:	e6 95       	lsr	r30
 540:	00 1c       	adc	r0, r0
 542:	ca f7       	brpl	.-14     	; 0x536 <__divsf3_pse+0x2c>
 544:	29 d0       	rcall	.+82     	; 0x598 <__divsf3_pse+0x8e>
 546:	fe 2f       	mov	r31, r30
 548:	27 d0       	rcall	.+78     	; 0x598 <__divsf3_pse+0x8e>
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	bb 1f       	adc	r27, r27
 552:	26 17       	cp	r18, r22
 554:	37 07       	cpc	r19, r23
 556:	48 07       	cpc	r20, r24
 558:	ab 07       	cpc	r26, r27
 55a:	b0 e8       	ldi	r27, 0x80	; 128
 55c:	09 f0       	breq	.+2      	; 0x560 <__divsf3_pse+0x56>
 55e:	bb 0b       	sbc	r27, r27
 560:	80 2d       	mov	r24, r0
 562:	bf 01       	movw	r22, r30
 564:	ff 27       	eor	r31, r31
 566:	93 58       	subi	r25, 0x83	; 131
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	2a f0       	brmi	.+10     	; 0x576 <__divsf3_pse+0x6c>
 56c:	9e 3f       	cpi	r25, 0xFE	; 254
 56e:	51 05       	cpc	r21, r1
 570:	68 f0       	brcs	.+26     	; 0x58c <__divsf3_pse+0x82>
 572:	85 c0       	rjmp	.+266    	; 0x67e <__fp_inf>
 574:	cf c0       	rjmp	.+414    	; 0x714 <__fp_szero>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	ec f3       	brlt	.-6      	; 0x574 <__divsf3_pse+0x6a>
 57a:	98 3e       	cpi	r25, 0xE8	; 232
 57c:	dc f3       	brlt	.-10     	; 0x574 <__divsf3_pse+0x6a>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b7 95       	ror	r27
 586:	f7 95       	ror	r31
 588:	9f 5f       	subi	r25, 0xFF	; 255
 58a:	c9 f7       	brne	.-14     	; 0x57e <__divsf3_pse+0x74>
 58c:	88 0f       	add	r24, r24
 58e:	91 1d       	adc	r25, r1
 590:	96 95       	lsr	r25
 592:	87 95       	ror	r24
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret
 598:	e1 e0       	ldi	r30, 0x01	; 1
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	bb 1f       	adc	r27, r27
 5a2:	62 17       	cp	r22, r18
 5a4:	73 07       	cpc	r23, r19
 5a6:	84 07       	cpc	r24, r20
 5a8:	ba 07       	cpc	r27, r26
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__divsf3_pse+0xaa>
 5ac:	62 1b       	sub	r22, r18
 5ae:	73 0b       	sbc	r23, r19
 5b0:	84 0b       	sbc	r24, r20
 5b2:	ba 0b       	sbc	r27, r26
 5b4:	ee 1f       	adc	r30, r30
 5b6:	88 f7       	brcc	.-30     	; 0x59a <__divsf3_pse+0x90>
 5b8:	e0 95       	com	r30
 5ba:	08 95       	ret

000005bc <__floatunsisf>:
 5bc:	e8 94       	clt
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__floatsisf+0x12>

000005c0 <__floatsisf>:
 5c0:	97 fb       	bst	r25, 7
 5c2:	3e f4       	brtc	.+14     	; 0x5d2 <__floatsisf+0x12>
 5c4:	90 95       	com	r25
 5c6:	80 95       	com	r24
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	99 23       	and	r25, r25
 5d4:	a9 f0       	breq	.+42     	; 0x600 <__floatsisf+0x40>
 5d6:	f9 2f       	mov	r31, r25
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	bb 27       	eor	r27, r27
 5dc:	93 95       	inc	r25
 5de:	f6 95       	lsr	r31
 5e0:	87 95       	ror	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f1 11       	cpse	r31, r1
 5ea:	f8 cf       	rjmp	.-16     	; 0x5dc <__floatsisf+0x1c>
 5ec:	fa f4       	brpl	.+62     	; 0x62c <__floatsisf+0x6c>
 5ee:	bb 0f       	add	r27, r27
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__floatsisf+0x36>
 5f2:	60 ff       	sbrs	r22, 0
 5f4:	1b c0       	rjmp	.+54     	; 0x62c <__floatsisf+0x6c>
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	16 c0       	rjmp	.+44     	; 0x62c <__floatsisf+0x6c>
 600:	88 23       	and	r24, r24
 602:	11 f0       	breq	.+4      	; 0x608 <__floatsisf+0x48>
 604:	96 e9       	ldi	r25, 0x96	; 150
 606:	11 c0       	rjmp	.+34     	; 0x62a <__floatsisf+0x6a>
 608:	77 23       	and	r23, r23
 60a:	21 f0       	breq	.+8      	; 0x614 <__floatsisf+0x54>
 60c:	9e e8       	ldi	r25, 0x8E	; 142
 60e:	87 2f       	mov	r24, r23
 610:	76 2f       	mov	r23, r22
 612:	05 c0       	rjmp	.+10     	; 0x61e <__floatsisf+0x5e>
 614:	66 23       	and	r22, r22
 616:	71 f0       	breq	.+28     	; 0x634 <__floatsisf+0x74>
 618:	96 e8       	ldi	r25, 0x86	; 134
 61a:	86 2f       	mov	r24, r22
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	2a f0       	brmi	.+10     	; 0x62c <__floatsisf+0x6c>
 622:	9a 95       	dec	r25
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	da f7       	brpl	.-10     	; 0x622 <__floatsisf+0x62>
 62c:	88 0f       	add	r24, r24
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__fp_cmp>:
 636:	99 0f       	add	r25, r25
 638:	00 08       	sbc	r0, r0
 63a:	55 0f       	add	r21, r21
 63c:	aa 0b       	sbc	r26, r26
 63e:	e0 e8       	ldi	r30, 0x80	; 128
 640:	fe ef       	ldi	r31, 0xFE	; 254
 642:	16 16       	cp	r1, r22
 644:	17 06       	cpc	r1, r23
 646:	e8 07       	cpc	r30, r24
 648:	f9 07       	cpc	r31, r25
 64a:	c0 f0       	brcs	.+48     	; 0x67c <__fp_cmp+0x46>
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	e4 07       	cpc	r30, r20
 652:	f5 07       	cpc	r31, r21
 654:	98 f0       	brcs	.+38     	; 0x67c <__fp_cmp+0x46>
 656:	62 1b       	sub	r22, r18
 658:	73 0b       	sbc	r23, r19
 65a:	84 0b       	sbc	r24, r20
 65c:	95 0b       	sbc	r25, r21
 65e:	39 f4       	brne	.+14     	; 0x66e <__fp_cmp+0x38>
 660:	0a 26       	eor	r0, r26
 662:	61 f0       	breq	.+24     	; 0x67c <__fp_cmp+0x46>
 664:	23 2b       	or	r18, r19
 666:	24 2b       	or	r18, r20
 668:	25 2b       	or	r18, r21
 66a:	21 f4       	brne	.+8      	; 0x674 <__fp_cmp+0x3e>
 66c:	08 95       	ret
 66e:	0a 26       	eor	r0, r26
 670:	09 f4       	brne	.+2      	; 0x674 <__fp_cmp+0x3e>
 672:	a1 40       	sbci	r26, 0x01	; 1
 674:	a6 95       	lsr	r26
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	81 1d       	adc	r24, r1
 67a:	81 1d       	adc	r24, r1
 67c:	08 95       	ret

0000067e <__fp_inf>:
 67e:	97 f9       	bld	r25, 7
 680:	9f 67       	ori	r25, 0x7F	; 127
 682:	80 e8       	ldi	r24, 0x80	; 128
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	08 95       	ret

0000068a <__fp_nan>:
 68a:	9f ef       	ldi	r25, 0xFF	; 255
 68c:	80 ec       	ldi	r24, 0xC0	; 192
 68e:	08 95       	ret

00000690 <__fp_pscA>:
 690:	00 24       	eor	r0, r0
 692:	0a 94       	dec	r0
 694:	16 16       	cp	r1, r22
 696:	17 06       	cpc	r1, r23
 698:	18 06       	cpc	r1, r24
 69a:	09 06       	cpc	r0, r25
 69c:	08 95       	ret

0000069e <__fp_pscB>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	12 16       	cp	r1, r18
 6a4:	13 06       	cpc	r1, r19
 6a6:	14 06       	cpc	r1, r20
 6a8:	05 06       	cpc	r0, r21
 6aa:	08 95       	ret

000006ac <__fp_round>:
 6ac:	09 2e       	mov	r0, r25
 6ae:	03 94       	inc	r0
 6b0:	00 0c       	add	r0, r0
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0xc>
 6b4:	88 23       	and	r24, r24
 6b6:	52 f0       	brmi	.+20     	; 0x6cc <__fp_round+0x20>
 6b8:	bb 0f       	add	r27, r27
 6ba:	40 f4       	brcc	.+16     	; 0x6cc <__fp_round+0x20>
 6bc:	bf 2b       	or	r27, r31
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__fp_round+0x18>
 6c0:	60 ff       	sbrs	r22, 0
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__fp_round+0x20>
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	08 95       	ret

000006ce <__fp_split3>:
 6ce:	57 fd       	sbrc	r21, 7
 6d0:	90 58       	subi	r25, 0x80	; 128
 6d2:	44 0f       	add	r20, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	59 f0       	breq	.+22     	; 0x6ee <__fp_splitA+0x10>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	71 f0       	breq	.+28     	; 0x6f8 <__fp_splitA+0x1a>
 6dc:	47 95       	ror	r20

000006de <__fp_splitA>:
 6de:	88 0f       	add	r24, r24
 6e0:	97 fb       	bst	r25, 7
 6e2:	99 1f       	adc	r25, r25
 6e4:	61 f0       	breq	.+24     	; 0x6fe <__fp_splitA+0x20>
 6e6:	9f 3f       	cpi	r25, 0xFF	; 255
 6e8:	79 f0       	breq	.+30     	; 0x708 <__fp_splitA+0x2a>
 6ea:	87 95       	ror	r24
 6ec:	08 95       	ret
 6ee:	12 16       	cp	r1, r18
 6f0:	13 06       	cpc	r1, r19
 6f2:	14 06       	cpc	r1, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	f2 cf       	rjmp	.-28     	; 0x6dc <__fp_split3+0xe>
 6f8:	46 95       	lsr	r20
 6fa:	f1 df       	rcall	.-30     	; 0x6de <__fp_splitA>
 6fc:	08 c0       	rjmp	.+16     	; 0x70e <__fp_splitA+0x30>
 6fe:	16 16       	cp	r1, r22
 700:	17 06       	cpc	r1, r23
 702:	18 06       	cpc	r1, r24
 704:	99 1f       	adc	r25, r25
 706:	f1 cf       	rjmp	.-30     	; 0x6ea <__fp_splitA+0xc>
 708:	86 95       	lsr	r24
 70a:	71 05       	cpc	r23, r1
 70c:	61 05       	cpc	r22, r1
 70e:	08 94       	sec
 710:	08 95       	ret

00000712 <__fp_zero>:
 712:	e8 94       	clt

00000714 <__fp_szero>:
 714:	bb 27       	eor	r27, r27
 716:	66 27       	eor	r22, r22
 718:	77 27       	eor	r23, r23
 71a:	cb 01       	movw	r24, r22
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <__gesf2>:
 720:	8a df       	rcall	.-236    	; 0x636 <__fp_cmp>
 722:	08 f4       	brcc	.+2      	; 0x726 <__gesf2+0x6>
 724:	8f ef       	ldi	r24, 0xFF	; 255
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
